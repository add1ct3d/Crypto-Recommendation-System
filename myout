int main(int argc , char* argv[]){
	string metric = "euclidean";
	int L = 5,d = 100,K = 3,W = 350,ml = 1;
	bool validation = false;
	int TableSize = pow(2,K);
	string dataset_path,semantic_path,coins_path;
	ifstream semantic_dict,coins_dict;
	int num_clusters = 5;
	string output_path = "./myout.out";
	//Initialization
	if(argc == 1){
		dataset_path.assign("./test_dataset");
		coins_path.assign("./coins_queries.csv");
		semantic_path.assign("./vader_lexicon.csv");
	}
	for(int i = 1 ; i < argc ; i++){
		string s(argv[i]);
		if((s == "-i")and(i != argc-1)){
			string p = argv[i+1];
			dataset_path.assign(p);
			coins_path.assign("./coins_queries.csv");
			semantic_path.assign("./vader_lexicon.csv");
		}
		else if(s == "-validate"){
			validation = true;
		}
		else if((s == "-o")and(i != argc-1)){
			output_path.assign(argv[i+1]);
			i++;
		}
	}
	InitCryptoMap(coins_path);
	if(validation == false){
		vector<User> Users  = getRealUsers(dataset_path,output_path,semantic_path,coins_path);
		vector<Point> Points;
		vector<map<string,double>> UserVectors;
		for(int i = 0 ; i < Users.size() ;i++){
			Users.at(i).Normalize();
			UserVectors.push_back(Users.at(i).GetCoinsVector());
			std::map<string,double> v_map = Users.at(i).GetCoinsVector();
			Points.push_back(Point(Users.at(i).getID(),v_map));
			Points.back().unassign();
		}
		/*vector<HashTable> HashTables;
		for(int l = 0 ; l < L ; l++){
			HashTables.push_back(HashTable(K,TableSize,W));	
		}
		*/
		//LSH_Build_Cosine(HashTables,L,d,Points);
		//PrintAll(HashTables,L);
		//cout<<"A1"<<endl;
		//LSH_Recommend_Coins(HashTables,L,Users,Points,5);
		vector<User> VirtualUsers = getVirtualUsers("./twitter_dataset_small_v2.csv",output_path,num_clusters,L,semantic_path,coins_path);
		vector<Point> VirtualPoints;
		vector<map<string,double>> VirtualVectors;
		for(int i = 0 ; i < VirtualUsers.size() ;i++){
			VirtualUsers.at(i).Normalize();
			VirtualVectors.push_back(VirtualUsers.at(i).GetCoinsVector());
			std::map<string,double> v_map = VirtualUsers.at(i).GetCoinsVector();
			VirtualPoints.push_back(Point(VirtualUsers.at(i).getID(),v_map));
		}
		/*vector<HashTable> VirtualHashes;
		for(int l = 0 ; l < L ; l++){
			VirtualHashes.push_back(HashTable(K,TableSize,W));	
		}
		LSH_Build_Cosine(VirtualHashes,L,d,VirtualPoints);
		LSH_Recommend_Coins(VirtualHashes,L,Users,Points,2);
		vector<Point> centroids;
		centroids = Init_Random(Points,num_clusters);
		assert(centroids.size() == num_clusters);
		Cluster_Struct CLUSTERS;
		CLUSTERS.reserve(num_clusters);
		for(int i = 0 ; i < num_clusters ; i ++){
			CLUSTERS.push_back(new vector<Point>());
		}
		int loops = 0;
		Assign_Lloyd(CLUSTERS,Points,centroids,metric);
		data_type obj1 = ObjectiveFunction(CLUSTERS,centroids,metric,num_clusters,true);
		while( loops < ml){
			K_means(CLUSTERS,centroids,metric,d);
			Assign_Lloyd(CLUSTERS,Points,centroids,metric);
			data_type obj2 = ObjectiveFunction(CLUSTERS,centroids,metric,num_clusters,true);
			data_type improv = (obj1 - obj2)/obj1; // if obj2 close to obj1 : improv -> 0 , else improv -> 1
			obj1 = obj2;
			//PrintClusters(CLUSTERS,centroids,true,output_path);
			if(improv <= 0.05)break;
			loops++;
		}
		Cluster_Recommend_Coins(CLUSTERS,centroids,Users,Points,5);
		for(int i = 0 ; i < Points.size() ; i++){
			Point& p = Points.at(i);
			p.unassign(); 
			User& u =  Users.at(i);
			vector<Point> JointPoints = VirtualPoints;
			vector<User> JointUsers = VirtualUsers;
			JointUsers.push_back(u);
			JointPoints.push_back(p);
			vector<Point> centroids;
			cout<<"Init random"<<endl;
			centroids = Init_Random(JointPoints,num_clusters);
			assert(centroids.size() == num_clusters);
			Cluster_Struct CLUSTERS;
			CLUSTERS.reserve(num_clusters);
			for(int i = 0 ; i < num_clusters ; i ++){
				CLUSTERS.push_back(new vector<Point>());
			}
			cout<<"clusters  pushed"<<endl;
			int loops = 0;
			Assign_Lloyd(CLUSTERS,JointPoints,centroids,metric);
			cout<<"assigned"<<endl;
			data_type obj1 = ObjectiveFunction(CLUSTERS,centroids,metric,num_clusters,true);
			cout<<"objective"<<endl;
			while( loops < ml){
				cout<<"loop"<<endl;
				K_means(CLUSTERS,centroids,metric,d);
				Assign_Lloyd(CLUSTERS,JointPoints,centroids,metric);
				cout<<"assigned"<<endl;
				data_type obj2 = ObjectiveFunction(CLUSTERS,centroids,metric,num_clusters,true);
				data_type improv = (obj1 - obj2)/obj1; // if obj2 close to obj1 : improv -> 0 , else improv -> 1
				obj1 = obj2;
				//PrintClusters(CLUSTERS,centroids,true,output_path);
				if(improv <= 0.05)break;
				loops++;
			}
			cout<<"push p "<<endl;
			vector<Point> point_v;
			point_v.push_back(p);
			cout<<"cluster recommend"<<endl;
			Cluster_Recommend_Coins(CLUSTERS,centroids,JointUsers,point_v,2);
		}		
	}
	else{
		int count = 10;
		vector<User> Users  = getRealUsers(dataset_path,output_path,semantic_path,coins_path);
		vector<Point> Points;
		vector<map<string,double>> UserVectors;
		for(int i = 0 ; i < Users.size() ;i++){
			Users.at(i).Normalize();
			UserVectors.push_back(Users.at(i).GetCoinsVector());
			std::map<string,double> v_map = Users.at(i).GetCoinsVector();
			Points.push_back(Point(Users.at(i).getID(),v_map));
			Points.back().unassign();
		}
		vector<vector<User>> Partitions = GetPartitions(Users);
		double mean_error = 0;
		for(int partition = 0 ; partition < Partitions.size() ; partition++){
			vector<Point> NewPoints;
			vector<map<string,double>> NewUserVectors;
			vector<User> NewUsers =  GetPartitionTraining(Partitions,partition);
			vector<User> EvaluationSet = GetPartitionEvaluation(Partitions,partition);
			vector<User> Eval =  GetPartitionEvaluation(Partitions,partition);
			for(auto&x : Eval)
				NewUsers.push_back(x);

			SetEvaluationInfinite(Eval);
			for(int i = 0 ; i < NewUsers.size() ;i++){
				NewUsers.at(i).Normalize();
				NewUserVectors.push_back(NewUsers.at(i).GetCoinsVector());
				std::map<string,double> v_map = NewUsers.at(i).GetCoinsVector();
				NewPoints.push_back(Point(NewUsers.at(i).getID(),v_map));
				NewPoints.back().unassign();
			}
			vector<HashTable> HashTables;
			for(int l = 0 ; l < L ; l++){
				HashTables.push_back(HashTable(K,TableSize,W));	
			}
			LSH_Build_Cosine(HashTables,L,d,NewPoints);
			//PrintAll(HashTables,L);
			cout<<"A1-vaidation"<<endl;
			vector<vector<double>> recommendations = LSH_Cosine_Recommend(HashTables,L,NewPoints);
			//cout<<"recommendation done"<<endl;
			double error = 0;
			int j = 0;
			for(int u = NewUsers.size() - EvaluationSet.size() -1 ; u < NewUsers.size() ;u++){
				map<string,double> sentiment_score = EvaluationSet.at(j).GetCoinsVector();
				int c = 0;
				for(map<string,double>::iterator it = sentiment_score.begin(); it != sentiment_score.end(); ++it) {
					if(recommendations.at(u).size() == 0)continue;
					double e = it->second - recommendations.at(u).at(c);
					if(e < 0) e = -e;
					error+=e;
					c++;
				}
			}
			//cout<<"error = "<<error<<endl;
			mean_error += (error/100);
		}
		mean_error*=count;
		cout<<"mean error ="<<mean_error/10<<endl;
		mean_error = 0;
		for(int partition = 0 ; partition < Partitions.size() ; partition++){
			vector<Point> NewPoints;
			vector<map<string,double>> NewUserVectors;
			vector<User> NewUsers =  GetPartitionTraining(Partitions,partition);
			vector<User> EvaluationSet = GetPartitionEvaluation(Partitions,partition);
			vector<User> Eval =  GetPartitionEvaluation(Partitions,partition);
			for(auto&x : Eval)
				NewUsers.push_back(x);
			SetEvaluationInfinite(Eval);
			for(int i = 0 ; i < NewUsers.size() ;i++){
				NewUsers.at(i).Normalize();
				NewUserVectors.push_back(NewUsers.at(i).GetCoinsVector());
				std::map<string,double> v_map = NewUsers.at(i).GetCoinsVector();
				NewPoints.push_back(Point(NewUsers.at(i).getID(),v_map));
				NewPoints.back().unassign();
			}
			vector<Point> centroids;
			centroids = Init_Random(NewPoints,num_clusters);
			assert(centroids.size() == num_clusters);
			Cluster_Struct CLUSTERS;
			CLUSTERS.reserve(num_clusters);
			for(int i = 0 ; i < num_clusters ; i ++){
				CLUSTERS.push_back(new vector<Point>());
			}
			int loops = 0;
			Assign_Lloyd(CLUSTERS,NewPoints,centroids,metric);
			data_type obj1 = ObjectiveFunction(CLUSTERS,centroids,metric,num_clusters,true);
			while( loops < ml){
				K_means(CLUSTERS,centroids,metric,d);
				Assign_Lloyd(CLUSTERS,NewPoints,centroids,metric);
				data_type obj2 = ObjectiveFunction(CLUSTERS,centroids,metric,num_clusters,true);
				data_type improv = (obj1 - obj2)/obj1; // if obj2 close to obj1 : improv -> 0 , else improv -> 1
				obj1 = obj2;
				if(improv <= 0.05)break;
				loops++;
			}			
			cout<<"B1-validate"<<endl;
			vector<vector<double>> recommendations = Cluster_Euclidean_Recommend(HashTables,L,NewPoints);
			double error = 0;
			int j = 0;
			for(int u = NewUsers.size() - EvaluationSet.size() -1 ; u < NewUsers.size() ;u++){
				map<string,double> sentiment_score = EvaluationSet.at(j).GetCoinsVector();
				int c = 0;
				for(map<string,double>::iterator it = sentiment_score.begin(); it != sentiment_score.end(); ++it) {
					if(recommendations.at(u).size() == 0)continue;
					double e = it->second - recommendations.at(u).at(c);
					if(e < 0) e = -e;
					error+=e;
					c++;
				}
			}
			//cout<<"error = "<<error<<endl;
			mean_error += (error/100);
		}
		mean_error*=count;
		cout<<"mean error ="<<mean_error/10<<endl;
	}
	return 0;
}
